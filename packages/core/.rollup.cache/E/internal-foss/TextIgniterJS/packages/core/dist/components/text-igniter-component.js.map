{"version":3,"file":"text-igniter-component.js","sourceRoot":"","sources":["../../src/components/text-igniter-component.ts"],"names":[],"mappings":";AAAA,mCAAmC;AACnC,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC,CAAC,oCAAoC;AAClF,qDAAqD;AACrD,MAAM,oBAAqB,SAAQ,WAAW;IAG5C;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;IACtC,CAAC;IAEK,iBAAiB;;YACrB,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED,wBAAwB,CAAC,IAAY,EAAE,QAAgB,EAAE,QAAgB;QACvE,IAAI,IAAI,KAAK,QAAQ,IAAI,QAAQ,KAAK,QAAQ,EAAE,CAAC;YAC/C,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,mCAAmC;QAC/D,CAAC;IACH,CAAC;IAED,gBAAgB;;QACd,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,MAAM,GAAG,EAAE,CAAC;QAEhB,IAAI,CAAC;YACH,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC;QAC1C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;QAC5D,CAAC;QAED,MAAM,eAAe,GAAG,MAAA,IAAI,CAAC,UAAU,0CAAE,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAC5E,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,OAAO,CAAC,KAAK,CAAC,iDAAiD,CAAC,CAAC;YACjE,OAAO;QACT,CAAC;QAED,IAAI,WAAW,CAAC,eAAsB,EAAE,MAAa,CAAC,CAAC;IACzD,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,UAAW,CAAC,SAAS,GAAG;;;OAG1B,CAAC;IACN,CAAC;;AA1CM,uCAAkB,GAAG,CAAC,QAAQ,CAAC,CAAC;AA6CzC,cAAc,CAAC,MAAM,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC","sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport { TextIgniter } from '../TextIgniter'; // Import your existing editor class\r\n// import { TextIgniter } from \"../core/textIgniter\";\r\nclass TextIgniterComponent extends HTMLElement {\r\n  static observedAttributes = ['config'];\r\n\r\n  constructor() {\r\n    super();\r\n    this.attachShadow({ mode: 'open' });\r\n  }\r\n\r\n  async connectedCallback() {\r\n    this.render();\r\n    setTimeout(() => this.initializeEditor(), 0);\r\n  }\r\n\r\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\r\n    if (name === 'config' && oldValue !== newValue) {\r\n      this.connectedCallback(); // Reinitialize on attribute change\r\n    }\r\n  }\r\n\r\n  initializeEditor() {\r\n    const configAttr = this.getAttribute('config');\r\n    let config = {};\r\n\r\n    try {\r\n      config = JSON.parse(configAttr || '{}');\r\n    } catch (error) {\r\n      console.warn('Invalid JSON format for config attribute.');\r\n    }\r\n\r\n    const editorContainer = this.shadowRoot?.querySelector('#editor-container');\r\n    if (!editorContainer) {\r\n      console.error('Editor element not found inside the shadow DOM.');\r\n      return;\r\n    }\r\n\r\n    new TextIgniter(editorContainer as any, config as any);\r\n  }\r\n\r\n  render() {\r\n    this.shadowRoot!.innerHTML = `\r\n        <link rel=\"stylesheet\" href=\"dist/index.css\">\r\n        <div id=\"editor-container\"></div>\r\n      `;\r\n  }\r\n}\r\n\r\ncustomElements.define('text-igniter', TextIgniterComponent);\r\n"]}