{"version":3,"file":"undoRedoManager.js","sourceRoot":"","sources":["../../src/handlers/undoRedoManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { getSelectionRange, saveSelection } from '../utils/selectionManager';\r\nimport TextDocument from '../textDocument';\r\nimport EditorView from '../view/editorView';\r\nimport Piece from '../piece';\r\n\r\nexport interface DocumentSnapshot {\r\n  blocks: any[];\r\n  dataIds: string[];\r\n  selectedBlockId: string | null;\r\n  currentOffset: number;\r\n  selection?: { start: number; end: number };\r\n  cursorPosition?: number;\r\n}\r\n\r\nexport default class UndoRedoManager {\r\n  private document: TextDocument;\r\n  private snapshotUndoStack: DocumentSnapshot[] = [];\r\n  private snapshotRedoStack: DocumentSnapshot[] = [];\r\n  private maxSnapshots = 5000;\r\n  private editorView: EditorView;\r\n\r\n  constructor(document: TextDocument, editorView: EditorView) {\r\n    this.document = document;\r\n    this.editorView = editorView;\r\n  }\r\n\r\n  private createSnapshot(): DocumentSnapshot {\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [start, end] = getSelectionRange(this.editorView);\r\n    return {\r\n      blocks: JSON.parse(JSON.stringify(this.document.blocks)),\r\n      dataIds: [...this.document.dataIds],\r\n      selectedBlockId: this.document.selectedBlockId,\r\n      currentOffset: this.document.currentOffset,\r\n      selection: this.getCurrentSelection(),\r\n      cursorPosition: start,\r\n    };\r\n  }\r\n\r\n  private getCurrentSelection(): { start: number; end: number } {\r\n    // Assumes that document.editorView is set\r\n    const sel = saveSelection(this.document.editorView.container);\r\n    return sel ? { start: sel.start, end: sel.end } : { start: 0, end: 0 };\r\n  }\r\n\r\n  public saveUndoSnapshot(): void {\r\n    const snapshot = this.createSnapshot();\r\n    this.snapshotUndoStack.push(snapshot);\r\n    if (this.snapshotUndoStack.length > this.maxSnapshots) {\r\n      this.snapshotUndoStack.shift();\r\n    }\r\n    this.snapshotRedoStack = [];\r\n  }\r\n\r\n  private restoreSnapshot(snapshot: DocumentSnapshot): void {\r\n    this.document.blocks = snapshot.blocks;\r\n    this.document.dataIds = snapshot.dataIds;\r\n    // Use the internal setter (or assign directly) for selectedBlockId.\r\n    (this.document as any)._selectedBlockId = snapshot.selectedBlockId;\r\n    this.document.currentOffset = snapshot.currentOffset;\r\n    // Let TextDocumentâ€™s event listeners know that things have changed.\r\n    // IMPORTANT: Recreate the Piece instances.\r\n    for (let block of this.document.blocks) {\r\n      if (block.pieces && Array.isArray(block.pieces)) {\r\n        block.pieces = block.pieces.map(\r\n          (piece: any) => new Piece(piece.text, piece.attributes)\r\n        );\r\n      }\r\n    }\r\n    this.document.emit('documentChanged', this.document);\r\n    this.document.setCursorPosition(snapshot.cursorPosition || 0);\r\n    // Restore selection using your helper.\r\n    // if (snapshot.selection) {\r\n    //   restoreSelection(\r\n    //     this.document.editorView.container,\r\n    //     snapshot.selection.start,\r\n    //     snapshot.selection.end\r\n    //   );\r\n    // }\r\n  }\r\n\r\n  public undo(): void {\r\n    console.log('   ', this.snapshotUndoStack);\r\n    console.log('uuuno', this.snapshotRedoStack);\r\n    if (this.snapshotUndoStack.length === 0) return;\r\n    const currentSnapshot = this.createSnapshot();\r\n    this.snapshotRedoStack.push(currentSnapshot);\r\n    if (this.snapshotRedoStack.length > this.maxSnapshots) {\r\n      this.snapshotRedoStack.shift();\r\n    }\r\n    // Pop the last snapshot and restore it.\r\n    const snapshot = this.snapshotUndoStack.pop();\r\n    if (snapshot) {\r\n      this.restoreSnapshot(snapshot);\r\n    }\r\n  }\r\n\r\n  public redo(): void {\r\n    if (this.snapshotRedoStack.length === 0) return;\r\n    const currentSnapshot = this.createSnapshot();\r\n    this.snapshotUndoStack.push(currentSnapshot);\r\n    if (this.snapshotUndoStack.length > this.maxSnapshots) {\r\n      this.snapshotUndoStack.shift();\r\n    }\r\n    const snapshot = this.snapshotRedoStack.pop();\r\n    if (snapshot) {\r\n      this.restoreSnapshot(snapshot);\r\n    }\r\n  }\r\n}\r\n"]}