{"version":3,"file":"textDocument.js","sourceRoot":"","sources":["../src/textDocument.ts"],"names":[],"mappings":"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","sourcesContent":["import EventEmitter from \"./utils/events\";\r\nimport Piece from \"./piece\";\r\nimport EditorView from \"./view/editorView\";\r\nimport UndoRedoManager from \"./handlers/undoRedoManager\";\r\n\r\n// text document extend\r\nclass TextDocument extends EventEmitter {\r\n    dataIds: string[] = [];\r\n    pieces: Piece[];\r\n    blocks: any;\r\n    selectAll: boolean = false;\r\n    editorView!: EditorView;\r\n    undoRedoManager!: UndoRedoManager;\r\n\r\n    // selectedBlockId: string | null;\r\n    private _selectedBlockId: string | null = null;\r\n    get selectedBlockId(): string | null {\r\n        return this._selectedBlockId;\r\n    }\r\n\r\n    set selectedBlockId(value: string | null) {\r\n        if (this._selectedBlockId !== value) {\r\n            this._selectedBlockId = value;\r\n            const editorOffset = this.getCursorOffset(document.querySelector('[id=\"editor\"]') as HTMLElement);\r\n            const paraOffset = this.getCursorOffset(document.querySelector('[data-id=\"' + value + '\"]') as HTMLElement)\r\n\r\n            this.currentOffset = editorOffset - paraOffset;\r\n        }\r\n    }\r\n    currentOffset: number;\r\n    constructor() {\r\n        super();\r\n        this.pieces = [new Piece(\"\")];\r\n        this.blocks = [\r\n            {\r\n                \"type\": \"text\",\r\n                \"dataId\": 'data-id-1734604240404',\r\n                \"class\": \"paragraph-block\",\r\n                \"alignment\": \"left\",\r\n                \"pieces\": [new Piece(\" \")],\r\n                // listType: null, // null | 'ol' | 'ul' \r\n            },\r\n            // { \"dataId\": 'data-id-1734604240401', \"pieces\": [new Piece(\"\")] }\r\n        ];\r\n        this.selectedBlockId = 'data-id-1734604240404';\r\n        // this.selectedBlockId = '';\r\n\r\n        this.currentOffset = 0;\r\n        // this.editorView=\"\";\r\n    }\r\n    setEditorView(editorView: EditorView): void {\r\n        this.editorView = editorView;\r\n    }\r\n    getPlainText(): string {\r\n        return this.pieces.map(p => p.text).join(\"\");\r\n    }\r\n\r\n    setUndoRedoManager(undoRedoManager: UndoRedoManager): void {\r\n        this.undoRedoManager = undoRedoManager;\r\n    }\r\n\r\n    insertAt(text: string, attributes: { bold?: boolean; italic?: boolean; underline?: boolean, hyperlink?: boolean | string }, position: number, dataId: string | null = \"\", currentOffset: number = 0, id = \"\", actionType = '', isSynthetic = false): void {\r\n        if (!isSynthetic) {\r\n            this.undoRedoManager.saveUndoSnapshot();\r\n        }\r\n        console.log('inserted,', { start: position, text });\r\n        console.log('inserted,', this.blocks);\r\n        let offset = 0;\r\n        let newPieces: Piece[] = [];\r\n        let inserted = false;\r\n        let index = 0;\r\n        if (dataId) {\r\n            index = this.blocks.findIndex((block: any) => block.dataId === dataId);\r\n            // index = this.blocks.findIndex((block: any) => block.dataId === dataId)\r\n            offset = this.currentOffset;\r\n        }\r\n        // const previousValue = this.getRangeText(position, position);\r\n\r\n        // for (let piece of this.pieces) {\r\n        for (let piece of this.blocks[index].pieces) {\r\n            const pieceEnd = offset + piece.text.length;\r\n            if (!inserted && position <= pieceEnd) {\r\n                const relPos = position - offset;\r\n                if (relPos > 0) {\r\n                    newPieces.push(new Piece(piece.text.slice(0, relPos), { ...piece.attributes }));\r\n                }\r\n                newPieces.push(new Piece(text, { bold: attributes.bold || false, italic: attributes.italic || false, underline: attributes.underline || false, hyperlink: attributes.hyperlink || false }));\r\n                if (relPos < piece.text.length) {\r\n                    newPieces.push(new Piece(piece.text.slice(relPos), { ...piece.attributes }));\r\n                }\r\n                inserted = true;\r\n            } else {\r\n                newPieces.push(piece.clone());\r\n            }\r\n            offset = pieceEnd;\r\n        }\r\n\r\n        if (!inserted) {\r\n            const lastPiece = newPieces[newPieces.length - 1];\r\n            if (lastPiece && lastPiece.hasSameAttributes(new Piece(\"\", { bold: attributes.bold || false, italic: attributes.italic || false, underline: attributes.underline || false, hyperlink: attributes.hyperlink || false }))) {\r\n                lastPiece.text += text;\r\n            } else {\r\n                newPieces.push(new Piece(text, { bold: attributes.bold || false, italic: attributes.italic || false, underline: attributes.underline || false, hyperlink: attributes.hyperlink || false }));\r\n            }\r\n        }\r\n\r\n        const _data = this.mergePieces(newPieces)\r\n\r\n        this.blocks[index].pieces = _data\r\n        console.log({ position });\r\n\r\n        this.emit('documentChanged', this);\r\n\r\n    }\r\n\r\n    deleteRange(start: number, end: number, dataId: string | null = \"\", currentOffset: number = 0): void {\r\n        console.log('deleted2,', { start, end });\r\n        if (start === end) return;\r\n        let newPieces: Piece[] = [];\r\n        let offset = 0;\r\n        let index = 0;\r\n        let runBackspace = false;\r\n        if (dataId !== '' || dataId !== null) {\r\n            index = this.blocks.findIndex((block: any) => block.dataId === dataId)\r\n\r\n            offset = currentOffset;\r\n        }\r\n\r\n        // const previousValue = this.getRangeText(start, end);\r\n        let previousTextBlockIndex = 0;\r\n\r\n        if (start === offset) {\r\n            if (index - 1 >= 0 && this.blocks[index - 1].type === 'image') {\r\n                previousTextBlockIndex = index - 2;\r\n            } else {\r\n                previousTextBlockIndex = index - 1;\r\n            }\r\n            for (let piece1 of this.blocks[previousTextBlockIndex].pieces) {\r\n\r\n                newPieces.push(piece1.clone());\r\n                runBackspace = true;\r\n            }\r\n        }\r\n        for (let piece of this.blocks[index].pieces) {\r\n            const pieceEnd = offset + piece.text.length;\r\n            if (pieceEnd <= start || offset >= end) {\r\n                newPieces.push(piece.clone());\r\n            } else {\r\n                const pieceStart = offset;\r\n                const pieceText = piece.text;\r\n                if (start > pieceStart && start < pieceEnd) {\r\n                    newPieces.push(new Piece(pieceText.slice(0, start - pieceStart), { ...piece.attributes }));\r\n                }\r\n                if (end < pieceEnd) {\r\n                    newPieces.push(new Piece(pieceText.slice(end - pieceStart), { ...piece.attributes }));\r\n                }\r\n            }\r\n            offset = pieceEnd;\r\n        }\r\n\r\n        const _data = this.mergePieces(newPieces)\r\n\r\n        if (runBackspace) {\r\n            this.blocks[previousTextBlockIndex].pieces = _data\r\n\r\n            this.blocks[index].pieces = [new Piece(\" \")]\r\n            this.blocks = this.blocks.filter((block: any, i: number) => {\r\n                if (i !== index)\r\n                    return block;\r\n            });\r\n\r\n        } else\r\n            this.blocks[index].pieces = _data\r\n\r\n\r\n        if (_data.length === 0 && this.blocks.length > 1) {\r\n            this.blocks = this.blocks.filter((blocks: any) => {\r\n                return blocks.pieces.length !== 0;\r\n            });\r\n        }\r\n\r\n\r\n        this.emit('documentChanged', this);\r\n\r\n    }\r\n\r\n    deleteBlocks() {\r\n        this.blocks = this.blocks.filter((block: any) => {\r\n\r\n            if (!this.dataIds.includes(block.dataId)) {\r\n                return block;\r\n            }\r\n        })\r\n        this.dataIds = [];\r\n        this.selectAll = false;\r\n        if (this.blocks.length === 0) {\r\n            this.blocks.push({\r\n                \"dataId\": 'data-id-1734604240404', \"class\": \"paragraph-block\", \"pieces\": [new Piece(\" \")],\r\n                // listType: null, // null | 'ol' | 'ul'\r\n            })\r\n        }\r\n        this.emit('documentChanged', this);\r\n    }\r\n\r\n    getSelectedTextDataId(): string | null {\r\n        const selection = window.getSelection();\r\n        if (!selection || selection.rangeCount === 0) {\r\n            return null; // No text is selected\r\n        }\r\n\r\n        const range = selection.getRangeAt(0); // Get the current range of selection\r\n        const container = range.startContainer; // The container node of the selection\r\n\r\n        // Traverse to the parent element with `data-id` attribute\r\n        const elementWithId = (container.nodeType === Node.TEXT_NODE\r\n            ? container.parentElement\r\n            : container) as HTMLElement;\r\n\r\n        const dataIdElement = elementWithId.closest('[data-id]'); // Find the closest ancestor with `data-id`\r\n        return dataIdElement?.getAttribute('data-id') || null; // Return the `data-id` or null if not found\r\n    }\r\n\r\n    getAllSelectedDataIds(): string[] {\r\n        const selection = window.getSelection();\r\n        if (!selection || selection.rangeCount === 0) {\r\n            return []; // No text is selected\r\n        }\r\n\r\n        const range = selection.getRangeAt(0); // Get the current range of selection\r\n        const selectedIds: string[] = [];\r\n\r\n        // Traverse all nodes in the selection\r\n        const iterator = document.createNodeIterator(\r\n            range.commonAncestorContainer, // Start traversal from the common ancestor\r\n            NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT // Include element and text nodes\r\n        );\r\n\r\n        let currentNode: Node | null;\r\n        while ((currentNode = iterator.nextNode())) {\r\n            if (range.intersectsNode(currentNode)) {\r\n                const element =\r\n                    currentNode.nodeType === Node.TEXT_NODE\r\n                        ? currentNode.parentElement\r\n                        : (currentNode as HTMLElement);\r\n\r\n                const dataId = element?.closest('[data-id]')?.getAttribute('data-id');\r\n                if (dataId && !selectedIds.includes(dataId)) {\r\n                    selectedIds.push(dataId); // Add unique data-id to the array\r\n                }\r\n            }\r\n        }\r\n        this.dataIds = selectedIds\r\n        return selectedIds;\r\n    }\r\n\r\n    handleCtrlASelection(): string[] {\r\n        const selectedDataIds: string[] = [];\r\n        const editor = document.getElementById('editor'); // Assuming your contenteditable div has id 'editor'\r\n\r\n        if (editor) {\r\n            const childNodes = editor.querySelectorAll('[data-id]');\r\n            childNodes.forEach((node) => {\r\n                const dataId = node.getAttribute('data-id');\r\n                if (dataId && !selectedDataIds.includes(dataId)) {\r\n                    selectedDataIds.push(dataId);\r\n                }\r\n            });\r\n        }\r\n        this.dataIds = selectedDataIds;\r\n\r\n        return selectedDataIds;\r\n        // Now you can use `selectedDataIds` as needed\r\n    }\r\n    getSelectedDataIds(): string[] {\r\n        const selection = window.getSelection();\r\n        if (!selection || selection.rangeCount === 0) {\r\n            return []; // No text is selected\r\n        }\r\n\r\n        const range = selection.getRangeAt(0); // Get the current range of selection\r\n        const selectedIds: string[] = [];\r\n\r\n        // Get the start and end nodes of the selection\r\n        const startContainer = range.startContainer;\r\n        const endContainer = range.endContainer;\r\n\r\n        // Check if the startContainer or endContainer has a `data-id`\r\n        const startDataId = this.getDataIdFromNode(startContainer);\r\n        const endDataId = this.getDataIdFromNode(endContainer);\r\n\r\n        // Add unique data-ids\r\n        if (startDataId && !selectedIds.includes(startDataId)) {\r\n            selectedIds.push(startDataId);\r\n        }\r\n        if (endDataId && !selectedIds.includes(endDataId)) {\r\n            selectedIds.push(endDataId);\r\n        }\r\n\r\n        this.dataIds = selectedIds;\r\n        return selectedIds;\r\n    }\r\n\r\n    private getDataIdFromNode(node: Node): string | null {\r\n        const element = node.nodeType === Node.TEXT_NODE ? node.parentElement : (node as HTMLElement);\r\n        return element?.closest('[data-id]')?.getAttribute('data-id') || null;\r\n    }\r\n\r\n    getCursorOffset(container: HTMLElement): number {\r\n        const selection = window.getSelection();\r\n        if (!selection || selection.rangeCount === 0) {\r\n            return -1; // No selection or cursor in the container\r\n        }\r\n\r\n        const range = selection.getRangeAt(0);\r\n        let offset = 0;\r\n\r\n        const traverseNodes = (node: Node): boolean => {\r\n            if (node === range.startContainer) {\r\n                offset += range.startOffset;\r\n                return true; // Found the cursor\r\n            }\r\n\r\n            if (node.nodeType === Node.TEXT_NODE) {\r\n                offset += (node.textContent || '').length;\r\n            }\r\n\r\n            for (const child of Array.from(node.childNodes)) {\r\n                if (traverseNodes(child)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        traverseNodes(container);\r\n\r\n        return offset;\r\n    }\r\n\r\n\r\n    formatAttribute(start: number, end: number, attribute: keyof Piece['attributes'],\r\n        // 'bold' | 'italic' | 'underline' | 'undo' | 'redo' | 'fontFamily' | 'fontSize'\r\n        value: string | boolean): void {\r\n\r\n        console.log(\"formatAttribute\", start, end, attribute, value)\r\n        let newPieces: Piece[] = [];\r\n        let offset = 0;\r\n        let index = -1;\r\n        if (this.selectedBlockId !== '' || this.selectedBlockId !== null) {\r\n\r\n            index = this.blocks.findIndex((block: any) => block.dataId === this.selectedBlockId)\r\n            offset = this.currentOffset;\r\n\r\n        }\r\n\r\n        for (let piece of this.blocks[index].pieces) {\r\n\r\n            const pieceEnd = offset + piece.text.length;\r\n\r\n            if (pieceEnd <= start || offset >= end) {\r\n                newPieces.push(piece.clone());\r\n            } else {\r\n                const pieceStart = offset;\r\n                const pieceText = piece.text;\r\n                const startInPiece = Math.max(start - pieceStart, 0);\r\n                const endInPiece = Math.min(end - pieceStart, pieceText.length);\r\n                if (startInPiece > 0) {\r\n\r\n                    newPieces.push(new Piece(pieceText.slice(0, startInPiece), { ...piece.attributes }));\r\n\r\n\r\n                }\r\n                const selectedPiece = new Piece(pieceText.slice(startInPiece, endInPiece), { ...piece.attributes });\r\n                // selectedPiece.attributes[attribute] = value;\r\n\r\n                if (\r\n                    (attribute === 'bold' || attribute === 'italic' || attribute === 'underline' || attribute === 'undo' || attribute === 'redo' || attribute === 'hyperlink') &&\r\n                    typeof value === 'boolean'\r\n                ) {\r\n\r\n                    selectedPiece.attributes[attribute] = value; // TypeScript knows this is safe\r\n                } else if (\r\n                    (attribute === 'fontFamily' || attribute === 'fontSize' || attribute === 'hyperlink' || attribute === 'fontColor' || attribute === 'bgColor') &&\r\n                    typeof value === 'string'\r\n                ) {\r\n\r\n                    selectedPiece.attributes[attribute] = value; // TypeScript knows this is safe\r\n                }\r\n\r\n                newPieces.push(selectedPiece);\r\n\r\n                if (endInPiece < pieceText.length) {\r\n                    newPieces.push(new Piece(pieceText.slice(endInPiece), { ...piece.attributes }));\r\n                }\r\n            }\r\n            offset = pieceEnd;\r\n        }\r\n\r\n        const _data = this.mergePieces(newPieces)\r\n\r\n        this.blocks[index].pieces = _data\r\n        this.emit('documentChanged', this);\r\n    }\r\n\r\n    toggleOrderedList(dataId: string | null, id: string = \"\"): void {\r\n        const index = this.blocks.findIndex((block: any) => block.dataId === dataId);\r\n        if (index === -1) return;\r\n        const block = this.blocks[index];\r\n        // Toggle: if already ordered, turn it off; otherwise, turn it on\r\n        if (block.listType === 'ol' || block.listType === 'li') {\r\n            block.listType = null;\r\n            block.listStart = undefined;\r\n            block.parentId = undefined;\r\n        } else {\r\n            block.listType = 'ol';\r\n            block.listStart = 1;\r\n            // Mark the block as the start (parent) of its list group\r\n            block.parentId = block.dataId;\r\n        }\r\n\r\n        this.emit('documentChanged', this);\r\n    }\r\n\r\n\r\n\r\n\r\n    toggleUnorderedList(dataId: string | null): void {\r\n        const index = this.blocks.findIndex((block: any) => block.dataId === dataId);\r\n        if (index === -1) return;\r\n        const block = this.blocks[index];\r\n        block.listType = block.listType === 'ul' ? null : 'ul';\r\n        this.emit('documentChanged', this);\r\n    }\r\n\r\n\r\n\r\n    updateOrderedListNumbers(): void {\r\n        let currentNumber = 1;\r\n        let currentParentId: string | null = null;\r\n        for (let i = 0; i < this.blocks.length; i++) {\r\n            const block = this.blocks[i];\r\n            if (block.listType === 'ol' || block.listType === 'li') {\r\n                // If this block is the start of a new list group, reset the counter.\r\n                if (block.listType === 'ol' || block.parentId !== currentParentId) {\r\n                    currentNumber = 1;\r\n                    currentParentId = block.listType === 'ol' ? block.dataId : block.parentId;\r\n                }\r\n                block.listStart = currentNumber;\r\n                currentNumber++;\r\n            } else {\r\n                currentNumber = 1;\r\n                currentParentId = null;\r\n            }\r\n        }\r\n        this.emit('documentChanged', this);\r\n    }\r\n\r\n    /*\r\n    getRangeText(start: number, end: number): string {\r\n        let rangeText = '';\r\n        let currentOffset = 0;\r\n\r\n        for (const block of this.blocks) {\r\n            for (const piece of block.pieces) {\r\n                const pieceLength = piece.text.length;\r\n                if (currentOffset + pieceLength >= start && currentOffset < end) {\r\n                    console.log(piece, \"piece getRangeText\")\r\n                    const rangeStart = Math.max(0, start - currentOffset);\r\n                    const rangeEnd = Math.min(pieceLength, end - currentOffset);\r\n                    rangeText += piece.text.substring(rangeStart, rangeEnd);\r\n                }\r\n\r\n                currentOffset += pieceLength;\r\n\r\n                if (currentOffset >= end) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (currentOffset >= end) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return rangeText;\r\n       // return { rangeText: rangeText, piece: _piece };\r\n    }\r\n        */\r\n\r\n\r\n    undo(): void {\r\n        console.log('undo')\r\n        this.undoRedoManager.undo();\r\n    }\r\n\r\n    redo(): void {\r\n        this.undoRedoManager.redo();\r\n        console.log('redo')\r\n    }\r\n\r\n    setCursorPosition(position: number, dataId: string | null = ''): void {\r\n        if (dataId !== '') {\r\n            const divDataid = document.querySelector(`[data-id=\"${dataId}\"]`) as HTMLElement;\r\n            if (divDataid) {\r\n                setTimeout(() => divDataid.focus(), 0);\r\n            } else {\r\n                console.warn(`Element with data-id=\"${dataId}\" not found.`);\r\n                return;\r\n            }\r\n        } else {\r\n            this.editorView.container.focus();\r\n        }\r\n\r\n        const sel = window.getSelection();\r\n        if (!sel) return;\r\n\r\n        const range = document.createRange();\r\n        let charIndex = 0;\r\n        const nodeStack: Node[] = [this.editorView.container];\r\n        let node: Node | undefined;\r\n\r\n        const totalLength = this.editorView.container.textContent?.length || 0;\r\n        if (position < 0 || position > totalLength) return;\r\n\r\n        while ((node = nodeStack.pop())) {\r\n            if (node.nodeType === 3) { // Text node\r\n                const textNode = node as Text;\r\n                const nextCharIndex = charIndex + textNode.length;\r\n                if (position >= charIndex && position <= nextCharIndex) {\r\n                    range.setStart(textNode, Math.min(position - charIndex, textNode.length));\r\n                    range.collapse(true);\r\n                    break;\r\n                }\r\n                charIndex = nextCharIndex;\r\n            } else if ((node as HTMLElement).tagName === 'BR') {\r\n                if (position === charIndex) {\r\n                    range.setStartBefore(node);\r\n                    range.collapse(true);\r\n                    break;\r\n                }\r\n                charIndex++;\r\n            } else {\r\n                const el = node as HTMLElement;\r\n                let i = el.childNodes.length;\r\n                while (i--) {\r\n                    nodeStack.push(el.childNodes[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n    }\r\n\r\n\r\n    toggleBoldRange(start: number, end: number, id = \"\"): void {\r\n        const allBold = this.isRangeEntirelyAttribute(start, end, 'bold');\r\n        this.formatAttribute(start, end, 'bold', !allBold);\r\n    }\r\n\r\n    toggleItalicRange(start: number, end: number, id = \"\"): void {\r\n        const allItalic = this.isRangeEntirelyAttribute(start, end, 'italic');\r\n        this.formatAttribute(start, end, 'italic', !allItalic);\r\n    }\r\n\r\n    toggleUnderlineRange(start: number, end: number, id = \"\"): void {\r\n        const allUnderline = this.isRangeEntirelyAttribute(start, end, 'underline');\r\n        this.formatAttribute(start, end, 'underline', !allUnderline);\r\n    }\r\n    toggleUndoRange(start: number, end: number, id = \"\"): void {\r\n        const allUndo = this.isRangeEntirelyAttribute(start, end, 'undo');\r\n        this.formatAttribute(start, end, 'undo', !allUndo);\r\n    }\r\n    toggleRedoRange(start: number, end: number): void {\r\n        const allRedo = this.isRangeEntirelyAttribute(start, end, 'redo');\r\n        this.formatAttribute(start, end, 'redo', !allRedo);\r\n    }\r\n\r\n    applyFontColor(start: number, end: number, color: string, id = \"\"): void {\r\n        if (start < end) {\r\n            this.formatAttribute(start, end, \"fontColor\", color);\r\n            console.log('applyFontColor-color', color, start, end)\r\n        }\r\n    }\r\n\r\n    applyBgColor(start: number, end: number, color: string, id = \"\"): void {\r\n        if (start < end) {\r\n            this.formatAttribute(start, end, \"bgColor\", color);\r\n        }\r\n    }\r\n\r\n    isRangeEntirelyAttribute(start: number, end: number, attr: 'bold' | 'italic' | 'underline' | 'undo' | 'redo'): boolean {\r\n        let offset = this.currentOffset;\r\n        let allHaveAttr = true;\r\n\r\n        if (this.selectedBlockId !== '') {\r\n            const index = this.blocks.findIndex((block: any) => block.dataId === this.selectedBlockId)\r\n\r\n            for (let piece of this.blocks[index].pieces) {\r\n                const pieceEnd = offset + piece.text.length;\r\n                if (pieceEnd > start && offset < end) {\r\n                    if (!piece.attributes[attr]) {\r\n                        allHaveAttr = false;\r\n                        break;\r\n                    }\r\n                }\r\n                offset = pieceEnd;\r\n            }\r\n        }\r\n        return allHaveAttr;\r\n    }\r\n\r\n    mergePieces(pieces: Piece[]): Piece[] {\r\n        let merged: Piece[] = [];\r\n        for (let p of pieces) {\r\n            const last = merged[merged.length - 1];\r\n            if (last && last.hasSameAttributes(p)) {\r\n                last.text += p.text;\r\n            } else {\r\n                merged.push(p);\r\n            }\r\n        }\r\n        return merged;\r\n    }\r\n\r\n    findPieceAtOffset(offset: number, dataId: string | null = \"\"): Piece | null {\r\n        let currentOffset = 0;\r\n        if (dataId) {\r\n            for (let block of this.blocks) {\r\n                const blockLength = block.pieces.reduce((acc: number, curr: any) => acc + curr.text.length, 0);\r\n                if (block.dataId == dataId) {\r\n                    let prevPiece: Piece | null = null;\r\n                    for (let piece of block.pieces) {\r\n                        const pieceStart = currentOffset;\r\n                        const pieceEnd = pieceStart + piece.text.length;\r\n                        if (offset >= pieceStart && offset < pieceEnd) {\r\n                            return offset === pieceStart && prevPiece ? prevPiece : piece;\r\n                        }\r\n                        prevPiece = piece;\r\n                        currentOffset = pieceEnd;\r\n                    }\r\n                } else {\r\n                    currentOffset += blockLength;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setFontFamily(start: number, end: number, fontFamily: string): void {\r\n        this.formatAttribute(start, end, 'fontFamily', fontFamily);\r\n    }\r\n\r\n    setFontSize(start: number, end: number, fontSize: string): void {\r\n        this.formatAttribute(start, end, 'fontSize', fontSize);\r\n    }\r\n\r\n    setAlignment(alignment: 'left' | 'center' | 'right', dataId: string | null): void {\r\n        const block = this.blocks.find((block: any) => block.dataId === dataId);\r\n        if (!block) return;\r\n\r\n        block.alignment = alignment; // Update alignment\r\n        this.emit('documentChanged', this); // Trigger re-render\r\n    }\r\n\r\n    getHtmlContent() {\r\n        const editorContainer = document.getElementById(\"editor\"); // Adjust to your editor's ID\r\n        if (!editorContainer) {\r\n            console.error(\"Editor container not found.\");\r\n            return;\r\n        }\r\n\r\n        const htmlContent = editorContainer.innerHTML;\r\n\r\n\r\n        // You can also copy it to the clipboard\r\n        navigator.clipboard.writeText(htmlContent).then(() => {\r\n            console.log(\"HTML copied to clipboard!\");\r\n        }).catch(err => console.error(\"Failed to copy HTML:\", err));\r\n        return htmlContent;\r\n    }\r\n\r\n\r\n\r\n    getCursorOffsetInParent(parentSelector: string): {\r\n        offset: number; childNode: Node | null, innerHTML: string;\r\n        innerText: string;\r\n    } | null {\r\n        console.log(\"textPosition -1:vicky\", parentSelector)\r\n        const parentElement = document.querySelector(parentSelector);\r\n        if (!parentElement) return null;\r\n\r\n        const selection = window.getSelection();\r\n        if (!selection || selection.rangeCount === 0) return null;\r\n\r\n        const range = selection.getRangeAt(0);\r\n\r\n        // Ensure the cursor is within the parent element\r\n        if (!parentElement.contains(range.startContainer)) return null;\r\n\r\n        let offset = 0;\r\n        let targetNode: Node | null = null;\r\n        const walker = document.createTreeWalker(parentElement, NodeFilter.SHOW_TEXT, null);\r\n        let matchedChild = null;\r\n        // Traverse text nodes to calculate the total offset\r\n        while (walker.nextNode()) {\r\n            const currentNode = walker.currentNode;\r\n            console.log(currentNode,\"textPosition - currentNode: vicky\")\r\n            if (currentNode === range.startContainer) {\r\n                offset += range.startOffset; // Add the offset in the current node\r\n                targetNode = currentNode; // This is the child containing the cursor\r\n                matchedChild = currentNode.parentElement;\r\n                break;\r\n            } else {\r\n                offset += currentNode.textContent?.length || 0;\r\n            }\r\n        }\r\n\r\n        console.log({\r\n            offset, childNode: targetNode, innerHTML: matchedChild!.innerHTML,\r\n            innerText: matchedChild!.innerText\r\n        },\"textPosition - return values: vicky\")\r\n        return {\r\n            offset, childNode: targetNode, innerHTML: matchedChild!.innerHTML,\r\n            innerText: matchedChild!.innerText\r\n        };\r\n    }\r\n}\r\n\r\n\r\nexport default TextDocument;\r\n"]}