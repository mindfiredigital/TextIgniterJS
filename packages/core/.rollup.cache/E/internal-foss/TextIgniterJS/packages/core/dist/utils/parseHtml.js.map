{"version":3,"file":"parseHtml.js","sourceRoot":"","sources":["../../src/utils/parseHtml.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,UAAU,CAAC;AAE7B,MAAM,UAAU,iBAAiB,CAAC,IAAY;IAC1C,MAAM,MAAM,GAAG,IAAI,SAAS,EAAE,CAAC;IAC/B,MAAM,GAAG,GAAG,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IACtD,OAAO,qBAAqB,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;AAC7F,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,IAAU,EAAE,cAAoE;IAClH,IAAI,YAAY,qBAAQ,cAAc,CAAE,CAAC;IACzC,MAAM,MAAM,GAAY,EAAE,CAAC;IAE3B,IAAI,IAAI,YAAY,WAAW,EAAE,CAAC;QAE9B,IAAI,IAAI,CAAC,OAAO,KAAK,QAAQ,IAAI,IAAI,CAAC,OAAO,KAAK,GAAG;YAAE,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC;QAChF,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI,IAAI,IAAI,CAAC,OAAO,KAAK,GAAG;YAAE,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC;QAC9E,IAAI,IAAI,CAAC,OAAO,KAAK,GAAG;YAAE,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC;QAExD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAE5B,MAAM,CAAC,IAAI,CAAC,GAAG,qBAAqB,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACP,CAAC;SAAM,IAAI,IAAI,YAAY,IAAI,EAAE,CAAC;QAC9B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC;QAClC,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;YACrB,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,oBAAO,YAAY,EAAG,CAAC,CAAC;QACtD,CAAC;IACL,CAAC;IACD,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["\r\nimport Piece from \"../piece\";\r\n\r\nexport function parseHtmlToPieces(html: string): Piece[] {\r\n    const parser = new DOMParser();\r\n    const doc = parser.parseFromString(html, 'text/html');\r\n    return extractPiecesFromNode(doc.body, { bold: false, italic: false, underline: false });\r\n}\r\n\r\nexport function extractPiecesFromNode(node: Node, inheritedAttrs: {bold: boolean, italic: boolean, underline: boolean}): Piece[] {\r\n    let currentAttrs = { ...inheritedAttrs };\r\n    const pieces: Piece[] = [];\r\n\r\n    if (node instanceof HTMLElement) {\r\n        // Check if this element changes formatting\r\n        if (node.tagName === 'STRONG' || node.tagName === 'B') currentAttrs.bold = true;\r\n        if (node.tagName === 'EM' || node.tagName === 'I') currentAttrs.italic = true;\r\n        if (node.tagName === 'U') currentAttrs.underline = true;\r\n\r\n        node.childNodes.forEach(child => {\r\n            \r\n            pieces.push(...extractPiecesFromNode(child, currentAttrs));\r\n        });\r\n    } else if (node instanceof Text) {\r\n        const text = node.nodeValue || '';\r\n        if (text.trim() !== '') {\r\n            pieces.push(new Piece(text, { ...currentAttrs }));\r\n        }\r\n    }\r\n    return pieces;\r\n}\r\n"]}